<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linyc ’s wording</title>
    <description>2014 ~ 2015 year summary&lt;br/&gt; 2013/8 ~ start plan to travelling round the China.&lt;br/&gt; 2013/10 ~ 2014/1 traveling round the China,than buy an iPhone.&lt;br/&gt; 2014/2 ~ 2014/3 hometown.&lt;br/&gt; 2014/4 ~ start to sell wallet on taobao.&lt;br/&gt; 2014/10 ~ buy a macbook and start programming with iOS.&lt;br/&gt; 2015/2 ~ publish the first App on AppStore.&lt;br/&gt; 2015/3 ~ publish the second App on AppStore.&lt;br/&gt; &lt;/pre&gt;
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Apr 2015 11:18:03 +0800</pubDate>
    <lastBuildDate>Sat, 04 Apr 2015 11:18:03 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>第三季我是歌手与团队氛围的思考</title>
        <description>&lt;p&gt;看第三季我是歌手感觉这季的后台气氛和往季的差别比较大，从这季的第一集开始我就一直在想这个问题，后面越发的觉得其中韩红起了很大的影响作用。&lt;/p&gt;

&lt;p&gt;这个和一个团队很像，我以前也经历过，那种感觉就是即便你不想说话，性格也不是特别外向，但是在这样的氛围里面真的是会受影响。&lt;/p&gt;

&lt;p&gt;一个团队往往需要这样的人来调节氛围，她也许不是特意去做的，但是她就是不自觉的有这种影响，所以说，团队氛围很重要，而能带动氛围的人其实更重要。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2015-03-20 补充：突围赛韩红不在，“请客”这个词没有出现过！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 13:00:00 +0800</pubDate>
        <link>http://yourdomain.com/share/2015/03/15/third-season-i-am-singer-consider.html</link>
        <guid isPermaLink="true">http://yourdomain.com/share/2015/03/15/third-season-i-am-singer-consider.html</guid>
        
        
        <category>share</category>
        
      </item>
    
      <item>
        <title>用通俗的例子解释OAuth和OpenID的区别</title>
        <description>&lt;ul&gt;
  &lt;li&gt;什么是OAuth(&lt;a href=&quot;https://zh.wikipedia.org/wiki/OAuth&quot;&gt;Wiki&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;什么是OpenID(&lt;a href=&quot;https://zh.wikipedia.org/wiki/OpenID&quot;&gt;Wiki&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;详细的定义可以看wiki，下面举个例子说说我的理解&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;现在很多网站都可以用第三方的账号登陆，比如，现在我要登录&lt;code&gt;淘宝&lt;/code&gt;买东西，而如果我没有淘宝的账号，我也可以用&lt;code&gt;微博&lt;/code&gt;的账号登录，这个微博账号就是第三方账号了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenID强调 &lt;code&gt;验证 authentication&lt;/code&gt;，而OAuth强调 &lt;code&gt;授权 authorization&lt;/code&gt;。
验证就是说“我”&lt;code&gt;是不是&lt;/code&gt;(微博用户)，而授权是说“淘宝”&lt;code&gt;可不可以&lt;/code&gt;，而&lt;code&gt;可不可以&lt;/code&gt;的前提则是“我”&lt;code&gt;是不是&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;过程大概是这样&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;我点开微博登录的链接，淘宝就跳到微博登录页面，问我你是不是那个微博用户，是的话你用你的账号密码去登录，你先去给微博验明正身，是的话再来找我&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好啦，我屁颠屁颠输入账号跟密码，如果可以登录说明我这个身份是对的，通过了微博的验证后微博就告诉淘宝说，没错没错，我家里确实有么这个家伙&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;上面这些都是OpenID的责任，而且OpenID也只做这件事，就是前面说的&lt;code&gt;是不是&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;然后呢，淘宝就说好好，有你微博验证我放心，于是就让我通过了&lt;/li&gt;
  &lt;li&gt;等等，这时淘宝只知道微博他们家有我存在，但是并不知道我在微博家里叫什么名，做过什么事，其实淘宝也不应该知道，对吧，要是知道我在微博家老是到处举报别人卖假货坑顾客什么的，那我让你进我大淘宝岂不是会坏了我的大事，你丫是来捣乱的吧(至于淘宝为什么会这么想，哼哼～你们懂的)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所以，淘宝通常就会做一件事，什么事呢？这时就轮到OAuth出场了，淘宝在把我交给微博验明正身的时候其实还“忽悠“了我，明明只是验个身份，却问我要不要把我在微博家叫什么名做过什么事也告诉它(就是通常看到的几个打勾选项：&lt;code&gt;允许访问我的昵称&lt;/code&gt;/&lt;code&gt;允许访问我的头像&lt;/code&gt;等等)，淘宝说这样就可以为我提供更多的服务，什么服务呢？模凌两可，我呢看到有更多服务也没多想就打勾了，不要白不要是吧。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;这里就用到了OAuth，就是前面说的&lt;code&gt;可不可以&lt;/code&gt;，这个要是真发现我在微博家干过的事，会不会把我加入重点监控对象，那就要看淘宝有多少节操了&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其实现在很多的第三方登录都是这样，验证身份的同时顺便把你在其他地方的资料拿到手，名曰资料共享，其实共享一些非敏感信息倒也无妨，还可以免去了每去一个新网站都要填写一大堆重复资料的问题。但是我要吐槽的是，很多网站明明让我用第三方账号登录，你都OAuth了为毛登录后还要再填一遍邮箱昵称之类的东西？早知道这样我还不如直接在你这边注册就好了，在我看来这是用户体验的问题了。&lt;/p&gt;

&lt;p&gt;写这些其实就是想用简单通俗的语言来解释这两者的区别(旁边哥们怒了：那你为毛还这么啰嗦！啰嗦！嗦！ 哎呀～我的耳朵我的耳朵…)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;补充：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这篇也可以看看 &lt;a href=&quot;http://huoding.com/2010/10/10/8&quot;&gt;OAuth那些事儿&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;以上，如果说的不对，请指正，谢谢！&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 02:00:00 +0800</pubDate>
        <link>http://yourdomain.com/protocol/2015/03/15/oauth-and-openid.html</link>
        <guid isPermaLink="true">http://yourdomain.com/protocol/2015/03/15/oauth-and-openid.html</guid>
        
        
        <category>protocol</category>
        
      </item>
    
      <item>
        <title>无状态、REST、RESTful 和 Web Services[转]</title>
        <description>&lt;h4 id=&quot;openstack--rest-&quot;&gt;在理解 OpenStack 的过程中，常常遇到 REST 这个概念，现从各处搜罗如下：&lt;/h4&gt;

&lt;h2 id=&quot;web-service-&quot;&gt;对 Web Service 的理解：&lt;/h2&gt;

&lt;p&gt;Web 服务有点像对计算机友好的网页，基于让程序可以跨网络交换信息的标准和协议，一般是使用一个程序，也就是客户机或服务请求者(serice requester)请求信息或服务；使用另外一个程序，也就是服务器或服务器提供者(service provider)提供信息或服务。&lt;/p&gt;

&lt;p&gt;它是在另外一个层次上的 Web 分析，或者可以将 Web 服务看作为用计算机控制客户机而不是人类——所设计的动态网页。&lt;/p&gt;

&lt;p&gt;来自 &lt;a href=&quot;http://www.amazon.cn/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-%E8%B5%AB%E7%89%B9%E5%85%B0/dp/B003TSBAMM/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369390044&amp;amp;sr=8-1&amp;amp;keywords=python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B&quot;&gt;Python基础教程&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;无状态协议：&lt;/h2&gt;

&lt;p&gt;无状态服务器是指一种把每个请求作为与之前任何请求都无关的独立的事务的服务器。&lt;/p&gt;

&lt;p&gt;HTTP 服务器就是一个例子。以 URL 形式提交的客户端请求可能包含 cookies 等带状态的数据，这些数据完全指定了所需的文档，而不需要其他之前请求的上下文或内存。&lt;/p&gt;

&lt;p&gt;来自 &lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE&quot;&gt;WikiPedia&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;

&lt;p&gt;REST (REpresentation State Transfer，表述性状态转移) 。REST 指的是一组架构约束条件和原则。REST 从资源的角度来观察整个网络，分布在各处的资源由 URI 确定，而客户端的应用通过 URI 来获取资源的表征。REST 是设计风格而不是标准。REST 通常基于使用 HTTP，URI，和 XML 以及 HTML 这些现有的广泛流行的协议和标准。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一些特征：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源是由URI来指定。&lt;/li&gt;
  &lt;li&gt;对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的标准方法GET、POST、PUT和DELETE。&lt;/li&gt;
  &lt;li&gt;通过操作资源的表现形式来操作资源。&lt;/li&gt;
  &lt;li&gt;为所有”事物”定义ID&lt;/li&gt;
  &lt;li&gt;将所有事物链接在一起&lt;/li&gt;
  &lt;li&gt;资源多重表述&lt;/li&gt;
  &lt;li&gt;无状态通信&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;REST中的资源：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个惟一的地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REST中的无状态：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。&lt;/p&gt;

&lt;p&gt;来自 &lt;a href=&quot;http://zh.wikipedia.org/wiki/REST&quot;&gt;WikiPedia&lt;/a&gt;, &lt;a href=&quot;http://baike.baidu.com/view/1077487.htm&quot;&gt;百度百科&lt;/a&gt;, &lt;a href=&quot;http://www.infoq.com/cn/articles/rest-introduction&quot;&gt;infoQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RESTful:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;满足 REST 的应用程序或设计就是 RESTful。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hiaero.net/rest-and-restful&quot;&gt;&lt;em&gt;原文地址：http://hiaero.net/rest-and-restful&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;补充：其他资料&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.csdn.net/article/2013-08-01/2816424-Why-REST-is-so-important&quot;&gt;为啥REST如此重要？&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/protocol/2015/03/14/restful.html</link>
        <guid isPermaLink="true">http://yourdomain.com/protocol/2015/03/14/restful.html</guid>
        
        
        <category>protocol</category>
        
      </item>
    
      <item>
        <title>今日美文App[我的作品]</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/jin-ri-mei-wen-lei-mei-ri/id972558048?l=zh&amp;amp;ls=1&amp;amp;mt=8&quot;&gt;App store 下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/TodayArticleAppIcon@3x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今日美文，每天推荐一篇优质短文，每日一文的改进版，增加收藏功能。&lt;/p&gt;

&lt;p&gt;简洁的界面让您能够专注于阅读，无需注册和登录即可阅读文章，如果随机邂逅了一篇美文想细细品味，您也可以收藏起来，慢慢阅读，再也不怕文章丢了。&lt;/p&gt;

&lt;p&gt;注：文章来源归每日一文网所有。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Words have power , Enjoy your reading -&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 13 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/app/2015/03/13/TodayArticleApp.html</link>
        <guid isPermaLink="true">http://yourdomain.com/app/2015/03/13/TodayArticleApp.html</guid>
        
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>我是歌手第10期谭维维的“往日时光”</title>
        <description>&lt;p&gt;这期很喜欢谭维维的往日时光，特别是副歌部分，直起鸡皮疙瘩&lt;/p&gt;
&lt;object width=&quot;541&quot; height=&quot;450&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;flashVars&quot; value=&quot;id=22113165&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://i7.imgs.letv.com/player/swfPlayer.swf?autoplay=0&quot; /&gt;&lt;embed src=&quot;http://i7.imgs.letv.com/player/swfPlayer.swf?autoplay=0&quot; flashvars=&quot;id=22113165&quot; width=&quot;541&quot; height=&quot;450&quot; allowfullscreen=&quot;true&quot; type=&quot;application/x-shockwave-flash&quot; /&gt;&lt;/object&gt;
</description>
        <pubDate>Sun, 08 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/share/2015/03/08/%E6%88%91%E6%98%AF%E6%AD%8C%E6%89%8B%E7%AC%AC10%E6%9C%9F%E8%B0%AD%E7%BB%B4%E7%BB%B4.html</link>
        <guid isPermaLink="true">http://yourdomain.com/share/2015/03/08/%E6%88%91%E6%98%AF%E6%AD%8C%E6%89%8B%E7%AC%AC10%E6%9C%9F%E8%B0%AD%E7%BB%B4%E7%BB%B4.html</guid>
        
        
        <category>share</category>
        
      </item>
    
      <item>
        <title>今日材料报价App[我的作品]</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/jin-ri-cai-liao-bao-jia/id967274552?l=zh&amp;amp;ls=1&amp;amp;mt=8&quot;&gt;App store 下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/PlasticAppIcon@3x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1、本应用的作用&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;为方便生产材料的买家和卖家之间的供需关系，满足各种一级二级甚至更底层关系的生产厂家之间的信息共享，我们开发了这个应用。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2、您可以注册为厂家，和普通的买家用户&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;厂家：即生产材料的供应方，您可以发布今天您工厂的相应材料的价格，同时也可以发布一些特殊材料的价格（特殊材料指当前市场供应关系相对紧张的材料，该栏目没有限制只显示当天的数据，该功能方便您可以灵活处理这些材料以方便容易找到需求方，即买家）。厂家能查看自己的发布历史数据，左划即可删除对应的发布纪录。&lt;/p&gt;

&lt;p&gt;买家：即生产材料的需求方，您可以关注各个厂家，随时可以查看该厂家的联系信息。注：买家用户只提供修改密码功能，不能修改其他信息。&lt;/p&gt;

&lt;p&gt;默认“今日报价”只显示最新的50条数据，“特殊材料”则默认300条，下拉可刷新数据。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3、行情：可以查看当前石油的价格行情。&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/app/2015/03/07/PlasticPriceApp.html</link>
        <guid isPermaLink="true">http://yourdomain.com/app/2015/03/07/PlasticPriceApp.html</guid>
        
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>博客折腾历程</title>
        <description>&lt;p&gt;之前一直在&lt;a href=&quot;http://www.cnblogs.com/linyc&quot;&gt;博客园&lt;/a&gt;写技术的东西，后来偶尔看到各种“静态”，“Hexo”，“Wordpress”，“jekyll”，“Ghost”等等跟博客有关的字眼，然后也发现很多博客真的很漂亮，于是也想着弄个来玩玩。&lt;/p&gt;

&lt;p&gt;慢慢的又发现原来github还能建免费博客，抱着尝鲜的态度也跟着一些教程弄了个玩玩，弄着弄着发现原来静态博客还挺好玩的，Markdown的语法也是蛮新奇的，然后各种定制各种模板，之所以折腾起来比较爽还是因为感觉整个博客的东西都在自己的掌握中，那种感觉和在博客园写东西完全不是一回事啊。&lt;/p&gt;

&lt;p&gt;好吧，这个也是有一番折腾过程，其实jekyll还是比较简单的，反倒觉得Hexo还麻烦一点，搞到能够在github上运行起来以后，就去看Liquid模板语言，感觉这个东西也是挺好玩的，然后又是各种找Theme找模版什么的。这个耗了一些时间。&lt;/p&gt;

&lt;p&gt;最后突然意识到，其实我就是想建个博客来写写东西而已，这是最原始的需求，为什么后面会花费这么多时间去搞那些次要的主题之类的东西呢？&lt;/p&gt;

&lt;p&gt;最近看到这张图，看完想想非常有道理，很多时候总是背离了自己单纯的初衷，图中的梦想也可以理解为初衷或者目的～共勉～～&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/dreamEssence.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Mar 2015 23:00:00 +0800</pubDate>
        <link>http://yourdomain.com/blog/2015/03/06/how-to-created-blog.html</link>
        <guid isPermaLink="true">http://yourdomain.com/blog/2015/03/06/how-to-created-blog.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Mar 2015 01:19:54 +0800</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/03/06/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/03/06/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
